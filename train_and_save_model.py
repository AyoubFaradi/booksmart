#!/usr/bin/env python3
"""
Script pour entra√Æner et sauvegarder le mod√®le de recommandation de livres
"""

import sys
import os
from recommendation_model import BookRecommendationModel

def main():
    print("=" * 60)
    print("ü§ñ ENTRA√éNEMENT DU MOD√àLE DE RECOMMANDATION DE LIVRES")
    print("=" * 60)
    
    try:
        # Cr√©er une instance du mod√®le
        print("\nüìö Cr√©ation de l'instance du mod√®le...")
        model = BookRecommendationModel()
        
        # √âtape 1: Charger les donn√©es depuis la base de donn√©es
        print("\nüîÑ √âTAPE 1: Chargement des donn√©es depuis la base de donn√©es...")
        print("   - Connexion √† MySQL...")
        print("   - R√©cup√©ration des livres avec descriptions...")
        print("   - Nettoyage des descriptions...")
        
        if not model.load_books_data():
            print("‚ùå √âchec du chargement des donn√©es")
            print("   V√©rifiez que:")
            print("   - MySQL est d√©marr√©")
            print("   - La base de donn√©es 'application_gestion_ai' existe")
            print("   - La table 'livres' contient des donn√©es avec descriptions")
            return False
        
        print(f"‚úÖ {len(model.books_data)} livres charg√©s avec succ√®s")
        
        # √âtape 2: Entra√Æner le mod√®le TF-IDF
        print("\nüîÑ √âTAPE 2: Entra√Ænement du mod√®le TF-IDF...")
        print("   - Application du TF-IDF Vectorizer...")
        print("   - Transformation des descriptions en vecteurs num√©riques...")
        print("   - Calcul de la matrice de similarit√© cosinus...")
        
        model.train_model()
        
        # Afficher les informations du mod√®le
        info = model.get_model_info()
        print(f"‚úÖ Mod√®le TF-IDF entra√Æn√© avec succ√®s!")
        print(f"   - Nombre de features TF-IDF: {info['tfidf_features']}")
        print(f"   - Matrice de similarit√©: {info['similarity_matrix_shape']}")
        
        # √âtape 3: Sauvegarder le mod√®le
        print("\nüîÑ √âTAPE 3: Sauvegarde du mod√®le...")
        print("   - Sauvegarde du TF-IDF Vectorizer...")
        print("   - Sauvegarde de la matrice de similarit√©...")
        print("   - Sauvegarde des donn√©es des livres...")
        
        model_path = 'book_recommendation_model.pkl'
        model.save_model(model_path)
        
        # V√©rifier que le fichier a √©t√© cr√©√©
        if os.path.exists(model_path):
            file_size = os.path.getsize(model_path) / (1024 * 1024)  # Taille en MB
            print(f"‚úÖ Mod√®le sauvegard√© avec succ√®s!")
            print(f"   - Fichier: {model_path}")
            print(f"   - Taille: {file_size:.2f} MB")
        else:
            print("‚ùå Erreur: Le fichier de mod√®le n'a pas √©t√© cr√©√©")
            return False
        
        # √âtape 4: Test du mod√®le
        print("\nüîÑ √âTAPE 4: Test du mod√®le...")
        if info['books_count'] > 0:
            first_book_id = model.books_data.iloc[0]['id_livre']
            first_book_title = model.books_data.iloc[0]['titre']
            
            print(f"   - Test avec le livre: '{first_book_title}' (ID: {first_book_id})")
            
            recommendations = model.get_recommendations(first_book_id, 3)
            print(f"‚úÖ {len(recommendations)} recommandations g√©n√©r√©es:")
            
            for i, rec in enumerate(recommendations, 1):
                print(f"   {i}. {rec['titre']} (Score: {rec['similarity_score']:.3f})")
        
        # R√©sum√© final
        print("\n" + "=" * 60)
        print("üéâ ENTRA√éNEMENT TERMIN√â AVEC SUCC√àS!")
        print("=" * 60)
        print(f"üìä R√©sum√©:")
        print(f"   - Livres trait√©s: {info['books_count']}")
        print(f"   - Features TF-IDF: {info['tfidf_features']}")
        print(f"   - Mod√®le sauvegard√©: {model_path}")
        print(f"   - Pr√™t pour l'API FastAPI!")
        
        print("\nüöÄ Prochaines √©tapes:")
        print("   1. D√©marrer l'API FastAPI: python recommendation_api.py")
        print("   2. Tester l'API: http://localhost:8000/docs")
        print("   3. Int√©grer avec Laravel")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå ERREUR LORS DE L'ENTRA√éNEMENT: {e}")
        print("\nüîß Solutions possibles:")
        print("   - V√©rifiez que MySQL est d√©marr√©")
        print("   - V√©rifiez les param√®tres de connexion √† la base de donn√©es")
        print("   - Assurez-vous d'avoir des livres avec descriptions dans la base")
        print("   - V√©rifiez que toutes les d√©pendances Python sont install√©es")
        return False

if __name__ == "__main__":
    success = main()
    if not success:
        sys.exit(1)
