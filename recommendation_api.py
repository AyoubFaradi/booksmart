#!/usr/bin/env python3
"""
API FastAPI pour le syst√®me de recommandation de livres
"""

from fastapi import FastAPI, HTTPException, BackgroundTasks
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import List, Optional
import uvicorn
import logging
from recommendation_model import BookRecommendationModel
import os

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Cr√©ation de l'application FastAPI
app = FastAPI(
    title="API de Recommandation de Livres",
    description="API pour recommander des livres bas√©e sur TF-IDF et similarit√© cosinus",
    version="1.0.0"
)

# Configuration CORS pour permettre les requ√™tes depuis Laravel
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # En production, sp√©cifiez les domaines autoris√©s
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Mod√®les Pydantic pour les requ√™tes et r√©ponses
class RecommendationRequest(BaseModel):
    book_id: int
    n_recommendations: int = 5

class PersonalRecommendationRequest(BaseModel):
    books: List[dict]  # Liste de livres avec titre et description

class BookInfo(BaseModel):
    id_livre: int
    titre: str
    description: str
    image_url: Optional[str] = None
    stock: int
    rating: int
    price: float
    similarity_score: float

class RecommendationResponse(BaseModel):
    success: bool
    message: str
    recommendations: List[BookInfo]
    total_recommendations: int

class HealthResponse(BaseModel):
    status: str
    message: str
    model_info: dict

# Instance globale du mod√®le
model = None

def load_model():
    """Charge le mod√®le au d√©marrage de l'API"""
    global model
    try:
        model = BookRecommendationModel()
        if os.path.exists('book_recommendation_model.pkl'):
            model.load_model('book_recommendation_model.pkl')
            logger.info("Mod√®le charg√© avec succ√®s")
        else:
            logger.warning("Fichier de mod√®le non trouv√©, entra√Ænement n√©cessaire")
            model = None
    except Exception as e:
        logger.error(f"Erreur lors du chargement du mod√®le: {e}")
        model = None

@app.on_event("startup")
async def startup_event():
    """√âv√©nement de d√©marrage de l'API"""
    logger.info("üöÄ D√©marrage de l'API de recommandation...")
    load_model()

@app.get("/", response_model=dict)
async def root():
    """Point d'entr√©e principal de l'API"""
    return {
        "message": "API de Recommandation de Livres",
        "version": "1.0.0",
        "status": "active",
        "endpoints": {
            "health": "/health",
            "recommendations": "/recommendations",
            "personal": "/personal",
            "books": "/books",
            "docs": "/docs"
        }
    }

@app.get("/health", response_model=HealthResponse)
async def health_check():
    """V√©rification de l'√©tat de l'API et du mod√®le"""
    try:
        if model is None or model.similarity_matrix is None:
            return HealthResponse(
                status="warning",
                message="Mod√®le non disponible",
                model_info={"is_loaded": False}
            )
        
        info = model.get_model_info()
        return HealthResponse(
            status="healthy",
            message="API et mod√®le op√©rationnels",
            model_info=info
        )
    except Exception as e:
        logger.error(f"Erreur lors de la v√©rification de sant√©: {e}")
        return HealthResponse(
            status="error",
            message=f"Erreur: {str(e)}",
            model_info={"is_loaded": False}
        )

@app.get("/books", response_model=dict)
async def get_all_books():
    """R√©cup√®re tous les livres disponibles"""
    try:
        if model is None or model.books_data is None:
            raise HTTPException(
                status_code=503,
                detail="Mod√®le non disponible"
            )
        
        books = model.books_data.to_dict('records')
        return {
            "success": True,
            "total_books": len(books),
            "books": books[:50]  # Limiter √† 50 livres pour √©viter les r√©ponses trop grandes
        }
    except Exception as e:
        logger.error(f"Erreur lors de la r√©cup√©ration des livres: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"Erreur lors de la r√©cup√©ration des livres: {str(e)}"
        )

@app.get("/books/{book_id}", response_model=dict)
async def get_book(book_id: int):
    """R√©cup√®re un livre sp√©cifique par son ID"""
    try:
        if model is None or model.books_data is None:
            raise HTTPException(
                status_code=503,
                detail="Mod√®le non disponible"
            )
        
        book = model.books_data[model.books_data['id_livre'] == book_id]
        if book.empty:
            raise HTTPException(
                status_code=404,
                detail=f"Livre avec l'ID {book_id} non trouv√©"
            )
        
        return {
            "success": True,
            "book": book.iloc[0].to_dict()
        }
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Erreur lors de la r√©cup√©ration du livre {book_id}: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"Erreur lors de la r√©cup√©ration du livre: {str(e)}"
        )

@app.post("/recommendations", response_model=RecommendationResponse)
async def get_recommendations(request: RecommendationRequest):
    """Obtient des recommandations pour un livre sp√©cifique"""
    try:
        if model is None or model.similarity_matrix is None:
            raise HTTPException(
                status_code=503,
                detail="Mod√®le de recommandation non disponible"
            )
        
        recommendations = model.get_recommendations(
            request.book_id, 
            request.n_recommendations
        )
        
        return RecommendationResponse(
            success=True,
            message=f"Recommandations trouv√©es pour le livre ID {request.book_id}",
            recommendations=recommendations,
            total_recommendations=len(recommendations)
        )
        
    except ValueError as e:
        raise HTTPException(
            status_code=404,
            detail=str(e)
        )
    except Exception as e:
        logger.error(f"Erreur lors de l'obtention des recommandations: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"Erreur lors de l'obtention des recommandations: {str(e)}"
        )

@app.post("/personal", response_model=RecommendationResponse)
async def get_personal_recommendations(request: PersonalRecommendationRequest):
    """Obtient des recommandations personnalis√©es bas√©es sur les livres saisis"""
    try:
        if model is None or model.similarity_matrix is None:
            raise HTTPException(
                status_code=503,
                detail="Mod√®le de recommandation non disponible"
            )
        
        # Logique pour les recommandations personnalis√©es
        # Pour l'instant, on retourne les livres les plus populaires
        # Cette logique peut √™tre am√©lior√©e selon vos besoins
        
        # Trier par rating et stock
        popular_books = model.books_data.sort_values(
            by=['rating', 'stock'], 
            ascending=[False, False]
        ).head(8)
        
        recommendations = []
        for _, book in popular_books.iterrows():
            book_dict = book.to_dict()
            book_dict['similarity_score'] = 0.5  # Score par d√©faut pour les recommandations populaires
            recommendations.append(book_dict)
        
        return RecommendationResponse(
            success=True,
            message="Recommandations personnalis√©es g√©n√©r√©es",
            recommendations=recommendations,
            total_recommendations=len(recommendations)
        )
        
    except Exception as e:
        logger.error(f"Erreur lors de l'obtention des recommandations personnalis√©es: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"Erreur lors de l'obtention des recommandations personnalis√©es: {str(e)}"
        )

@app.post("/reload-model")
async def reload_model(background_tasks: BackgroundTasks):
    """Recharge le mod√®le (utile apr√®s mise √† jour des donn√©es)"""
    try:
        background_tasks.add_task(load_model)
        return {
            "success": True,
            "message": "Rechargement du mod√®le en cours..."
        }
    except Exception as e:
        logger.error(f"Erreur lors du rechargement du mod√®le: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"Erreur lors du rechargement du mod√®le: {str(e)}"
        )

if __name__ == "__main__":
    # D√©marrage du serveur
    print("üöÄ D√©marrage de l'API de recommandation...")
    print("üìñ Documentation disponible sur: http://localhost:5000/docs")
    print("üîç Test de sant√© sur: http://localhost:5000/health")
    
    uvicorn.run(
        "recommendation_api:app",
        host="0.0.0.0",
        port=5000,
        reload=True,
        log_level="info"
    )
